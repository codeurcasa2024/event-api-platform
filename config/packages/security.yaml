security:
    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern:  ^/login$
            stateless: true
            json_login:
                check_path:    /login
                username_path: email
                password_path: password
                # <-- ici on corrige le handler de succès
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure


        swagger:
            pattern: ^/api/docs                   # UI
            security: false                       # PAS de JWT
        swagger_json:
            pattern: ^/api/openapi\.(json|yaml)$  # JSON ou YAML
            security: false

        api:
            pattern:   ^/api
            stateless: true
            lazy: true
            jwt: ~




    access_control:
        # 1) on autorise l’OpenAPI et Swagger UI publiquement
        - { path: ^/api/docs$,        roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/openapi\.json$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/openapi\.yaml$, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # 2) on protège tout le reste de l’API
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

        # 3) on garde le login anonyme
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }



when@test:
    security:
        password_hashers:
            App\Entity\User:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10
